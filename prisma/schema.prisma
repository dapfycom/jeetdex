generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  id            String    @id @default(cuid())
  username      String    @unique
  address       String    @unique
  img           String
  bio           String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  likesReceived Likes[]   @relation("likesReceived")
  likesGiven    Likes[]   @relation("likesGiven")
  followed      Follows[] @relation("followed")
  following     Follows[] @relation("following")

  messages Messages[] @relation("messages")

  coins Coins[] @relation("coins")

  settings UserSettings?
}

model Likes {
  id String @id @default(cuid())

  likedBy   Users?  @relation("likesGiven", fields: [likedById], references: [id])
  likedById String?

  userLikes Users?  @relation("likesReceived", fields: [userId], references: [id])
  userId    String?

  createdAt DateTime @default(now())

  message   Messages @relation("message-likes", fields: [messageId], references: [id])
  messageId Int
}

model Follows {
  id         String @id @default(cuid())
  followed   Users  @relation("followed", fields: [followedId], references: [id])
  followedId String

  following   Users  @relation("following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())
}

model Chats {
  id        String     @id @default(cuid())
  pool      String     @unique
  createdAt DateTime   @default(now())
  messages  Messages[]
}

model Messages {
  id        Int      @id @default(autoincrement())
  content   String
  image     String?
  createdAt DateTime @default(now())
  chat      Chats    @relation(fields: [chatId], references: [id])
  chatId    String
  sender    Users    @relation("messages", fields: [senderId], references: [id])
  senderId  String

  likes Likes[] @relation("message-likes")

  messageReplied MessagesReplies[] @relation("meessage-replied")

  messageReplying MessagesReplies? @relation("meessage-replying")
}

model MessagesReplies {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  messageReplied   Messages @relation("meessage-replied", fields: [messageRepleidId], references: [id])
  messageRepleidId Int

  messageReplying   Messages @relation("meessage-replying", fields: [messageReplyingId], references: [id])
  messageReplyingId Int      @unique
}

model Coins {
  id          String  @id @default(cuid())
  identifier  String  @unique
  img         String? @unique
  owner       Users   @relation("coins", fields: [ownerId], references: [id])
  ownerId     String
  twitter     String?
  telegram    String?
  website     String?
  title       String?
  description String?
}

model UserSettings {
  id       String @id @default(cuid())
  slippage Float

  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique

  pools PoolsLikes[]
}

model Pools {
  id String @id @default(cuid())

  lpIdentifier String @unique
  token1       String
  token2       String

  usersLiked PoolsLikes[]
}

model PoolsLikes {
  id String @id @default(cuid())

  userSetting   UserSettings @relation(fields: [userSettingId], references: [id])
  userSettingId String
  pool          Pools        @relation(fields: [poolId], references: [id])
  poolId        String
}
